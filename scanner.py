import requests
import re
import urllib.parse
from bs4 import BeautifulSoup

class Scanner:
    
    def __init__(self,url,ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links
        self.custom_payloads = []

    def extract_links_from(self,url):
        response = self.session.get(url)
        return re.findall(b'(?:href=")(.*?)"',response.content)

    def crawl(self,url=None):
        if url == None:
            url = self.target_url
        href_links = self.extract_links_from(url)

        for link in href_links:
            link = urllib.parse.urljoin(str(url), str(link))

            if "#" in link:    # #r refers to original page so avoid duplicate page again and again
                link = link.split("#")[0]

            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
            #to avoid repeating the same url and ignore logout url
                self.target_links.append(link)
                #print link
                self.crawl(link)

    def extract_forms(self,url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, "html.parser")
        return parsed_html.findAll("form")

    def submit_form(self,form,value,url):
        action = form.get("action")
        post_url = urllib.parse.urljoin(url,action)
        method = form.get("method")
        
        inputs_list = form.findAll("input")
        post_data = {}

        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value

            post_data[input_name] = input_value
        if method == "post":
            return self.session.post(post_url,data=post_data)
        return self.session.get(post_url,params=post_data)

    def run_scanner(self, custom_payloads=None, output_file=None):
        if custom_payloads:
            self.custom_payloads = custom_payloads

        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print("[+] Testing form in " + link)
                for payload in self.custom_payloads:
                    is_vulnerable_to_xss = self.test_xss_in_form(form, link, payload)
                    if is_vulnerable_to_xss:
                        print("--" * 50)
                        print("[*****] XSS discovered in " + link + " in the following form:")
                        print(form)
                        print("--" * 50)
                        if output_file:
                            with open(output_file, 'a') as f:
                                f.write(f"[*****] XSS discovered in {link} in the following form:\n")
                                f.write(str(form) + "\n")
                                f.write("--" * 50 + "\n")

            if "=" in link:
                print("[+] Testing " + link)
                for payload in self.custom_payloads:
                    if_vulnerable_to_xss = self.test_xss_in_link(link, payload)
                    if if_vulnerable_to_xss:
                        print("--" * 50)
                        print("[*****] Discovered XSS in " + link)
                        print(link)
                        print("--" * 50)
                        if output_file:
                            with open(output_file, 'a') as f:
                                f.write(f"[*****] Discovered XSS in {link}\n")
                                f.write(link + "\n")
                                f.write("--" * 50 + "\n")

    def test_xss_in_link(self, url, payload):
        xss_test_script = payload
        url = url.replace("=", "=" + xss_test_script)
        response = self.session.get(url)
        return xss_test_script in response.content

    def test_xss_in_form(self, form, url, payload):
        response = self.submit_form(form, payload, url)
        return payload in response.content

# Example Usage:
if __name__ == "__main__":
    target_url = "http://example.com"
    links_to_ignore = ["http://example.com/logout"]
    scanner = Scanner(target_url, links_to_ignore)
    scanner.crawl()
    scanner.run_scanner(custom_payloads=["<sCript>alert('XSS')</scriPt>", "<svg/onload=alert('XSS')>", "<img/src='http://attacker.com/xss.jpg'>"], output_file="xss_results.txt")
